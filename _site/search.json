[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My personal teaching scripts",
    "section": "",
    "text": "This page collects all my prep work to teach NCEAS R workshops."
  },
  {
    "objectID": "r-setup.html",
    "href": "r-setup.html",
    "title": "R and Git Setup on RStudio Server",
    "section": "",
    "text": "Hello, welcome..\nIntroduce myself if I haven’t done so.\nFor the last session of the day, we will open RStudio in the server and learn about RMarkdown.\n\nWe will start with setting up RStudio and connecting RStudio with GitHub. I’m going to start sharing my screen\n— START SHARING SCREEN – BOOK —\nI’m in the book, lesson N3\nThe learning objectives for the first part of this lesson are:"
  },
  {
    "objectID": "r-setup.html#learning-objectives",
    "href": "r-setup.html#learning-objectives",
    "title": "R and Git Setup on RStudio Server",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nCreating an R project and how to organize your work in a project\nHow to make sure your local RStudio environment is set up for analysis\nHow to set up Git and GitHub"
  },
  {
    "objectID": "r-setup.html#rstudio-server",
    "href": "r-setup.html#rstudio-server",
    "title": "R and Git Setup on RStudio Server",
    "section": "RStudio server",
    "text": "RStudio server\n\nTo prevent from spending too much time of this workshop troubleshooting all the different issues that can arise when setting up R, RStudio and git environments, we have chosen to have everyone work on a remote server that has all the software you need all ready installed.\nWhat is a server? For those of you who are wondering. You can think about it as working on a different computer that you access through the internet.\nThis computer is different that the computer you have in front of you, so the server, has no knowledge of the files you have in your machine.\nBut it is easy to transfer files from your computer to the server and vice-versa through RStudio."
  },
  {
    "objectID": "r-setup.html#set-up",
    "href": "r-setup.html#set-up",
    "title": "R and Git Setup on RStudio Server",
    "section": "Set up",
    "text": "Set up\nSERVER LOGIN\n\nEveryone received and email providing your server user name and prompting to change you password?\nPlease put up a the red sticky if you don’t have you credentials to log in to the server. You can access the server with this link found in the book. And also shared in Slack.\nLog in with the username and password. - Everyone here? Please put up a red sticky if you haven’t been able to log in to the server.\n\nR-PROJECTS\n\nIn this workshop we are going to be using R projects.\nHave anyone here worked with R projects before?\nAn R project bundles your work in a portable, self-contained folder. - Within the project, all the relevant scripts, data files, figures/outputs, and history are stored in sub-folders.\nAn R project is tied to a directory on your local computer and\nImportantly - the working directory is the project’s root folder.\nThis makes organizing your work and collaborating with others easier.\nConsider you current data analysis workflow: Where do you import your data, where do you clean your data, where do you create graphs and ultimately a report?\nDo you go back and forth between multiple software tools like Excel, JMP, Google docs?\nAn R projects and the tools in R we will talk about today will consolidate this process because it can all be done and updated using one software, RStudio, within one R Project.\nWe are going to be doing nearly everything in one Rproject this week.\nThe server version of RStudio allows us to share projects with others. Sharing your project with the instructors of the course will allow us to see your code and offer assistance if you encounter an error you can’t fix.\n\nCREATE AN R PROJECT\nIn your RStudio server session, follow these steps to set up your R project:\n\nIn the “File” menu, select “New Project”\nClick “New Directory”\nClick “New Project”\nUnder “Directory name” type: training_{USERNAME}, eg: training_vargas\nLeave “Create Project as subdirectory of:” set to ~\nClick “Create Project”\n\nYour RStudio should open your project automatically after creating it. One way to check this is by looking at the top right corner and checking for the project name\nSHARING YOUR PROJECT - To share the project with the instructor team, locate the “project switcher” drop down menu in the upper right corner of your RStudio window. - This menu has the name of your project and a small black arrow. - Click in the dropdown menu and then select Share Project - A dialog box will pop up. - Add the following usernames: dolinh, jclark, virlar-knight and vargas-poulsen.\n\nClick OK.\n\nNow we have our Rproject! We Know it an Rproject, because we can see the Rproj file in our pane.\nLet’s learn about how we move within our Rproject. We do this using paths.\n\nPreparing to work in RStudio\n\nThe default RStudio setup has a few panes that you will use. Here they are with their default locations:\n\nConsole (entire left)\nEnvironment/History (tabbed in upper right)\nFiles/Plots/Packages/Help (tabbed in lower right)\n\nYou can change the default location of the panes, among many other things: Customizing RStudio.\nOne key question to ask whenever we open up RStudio is “where am I?” Because we like to work in RStudio projects, often this question is synonymous with “what project am I in?”\nThere are two places that can indicate what project we are in. The first is the project switcher menu in the upper right hand corner of your RStudio window. The second is the working directory path, in the top bar of your console. Note that by default, your working directory is set to the top level of your R project directory unless you change it using the setwd() function.\n\n\nUnderstand how to use paths and working directories\nNow that we have your project created (and notice we know it’s an R Project because we see a .Rproj file in our Files pane), let’s learn how to move in a project. We do this using paths.\nAs we mention before, an Rproject is a self-contained folder within your computer, or server in this case.\nThere are two types of paths in computing: absolute paths and relative paths.\nAn absolute path always starts with the root of your file system and locates files from there. The absolute path to my project directory is: /home/vargas-poulsen/training_vargas\nRelative paths start from some location in your file system that is below the root. Relative paths are combined with the path of that location to locate files on your system. R (and some other languages like MATLAB) refer to the location where the relative path starts as our working directory.\nRStudio projects automatically set the working directory to the directory of the project. This means that you can reference files from within the project without worrying about where the project directory itself is. If I want to read in a file from the data directory within my project, I can simply type read.csv(\"data/samples.csv\") as opposed to read.csv(\"/home/vargas-poulsen/training_vargas/data/samples.csv\")\nThis is not only convenient for you, but also when working collaboratively. We will talk more about this later, but if Jeanette makes a copy of my R project that I have published on GitHub, and I am using relative paths, he can run my code exactly as I have written it, without going back and changing \"/home/vargas-poulsen/training_vargas/data/samples.csv\" to \"/home/jclark/training_clark/data/samples.csv\"\nNote that once you start working in projects you should basically never need to run the setwd() command. If you are in the habit of doing this, stop and take a look at where and why you do it. Could leveraging the working directory concept of R projects eliminate this need? Almost definitely!\nSimilarly, think about how you work with absolute paths. Could you leverage the working directory of your R project to replace these with relative paths and make your code more portable? Probably!\n\n\nOrganizing your project\nWhen starting a new research project, one of the first things I do is create an R project for it (just like we have here!). The next step is to then populate that project with relevant directories. There are many tools out there that can do this automatically. Some examples are rrtools or usethis::create_package(). The goal is to organize your project so that it is a compendium of your research. This means that the project has all of the digital parts needed to replicate your analysis, like code, figures, the manuscript, and data access.\nThere are lots of good examples out there of research compendium. Here is one from a friend of NCEAS, Carl Boettiger, which he put together for a paper he wrote.\nThe complexity of this project reflects years of work. Perhaps more representative of the situation we are in at the start of our course is a project that looks like this one, which we have just started at NCEAS.\nCurrently, the only file in your project is your .Rproj file. Let’s add some directories and start a file folder structure. Some common directories are:\n\ndata: where we store our data (often contains subdirectories for raw, processed, and metadata data)\nR: contains scripts for cleaning or wrangling, etc. (some find this name misleading if their work has other scripts beyond the R programming language, in which case they call this directory scripts)\nplots or figs: generated plots, graphs, and figures\ndoc: summaries or reports of analysis or other relevant project information\n\nDirectory organization will vary from project to project, but the ultimate goal is to create a well organized project for both reproducibility and collaboration.\n\n\nSummary\n\norganize your research into projects using R projects\nuse R project working directories instead of setwd()\nuse relative paths from those working directories, not absolute paths\nstructure your R project as a compendium\n\n\n\nSetting up git\nBefore using git, you need to tell it who you are, also known as setting the global options. The only way to do this is through the command line. Newer versions of RStudio have a nice feature where you can open a terminal window in your RStudio session. Do this by selecting Tools -> Terminal -> New Terminal.\nA terminal tab should now be open where your console usually is.\nTo set the global options, type the following into the command prompt, with your actual name, and press enter:\n\ngit config --global user.name \"Matt Jones\"\n\nNote that if it ran successfully, it will look like nothing happened. We will check at the end to makre sure it worked.\nNext, enter the following line, with the email address you used when you created your account on github.com:\n\ngit config --global user.email \"gitcode@magisa.org\"\n\nNote that these lines need to be run one at a time.\nNext, we will set our credentials to not time out for a very long time. This is related to the way that our server operating system handles credentials - not doing this will make your PAT (which we will set up soon) expire immediately on the system, even though it is actually valid for a month.\n\ngit config --global credential.helper 'cache --timeout=10000000'\n\nLastly, we will set up two more configurations to make sure we have everything in place for out git lesson tomorrow. We will dive deeper into these concepts tomorrow. So for now, all you need to know us that we are letting git know how we want git to weave in the different versions of our work.\n\ngit config pull.rebase false\n\nAnd then, we will set that the default branch of our work is a branch called main. And again, we will go over these in more details concepts tomorrow.\n\ngit config --global init.defaultBranch main\n\nFinally, check to make sure everything looks correct by entering this command, which will return the options that you have set.\n\ngit config --global --list\n\n\n\nGitHub Authentication\nGitHub recently deprecated password authentication for accessing repositories, so we need to set up a secure way to authenticate. The book Happy git with R has a wealth of information related to working with git in R, and these instructions are based off of section 10.1.\nWe will be using a PAT (Personal Access Token) in this course, because it is easy to set up. For better security and long term use, we recommend taking the extra steps to set up SSH keys.\nSteps:\n\nRun usethis::create_github_token() in the console\nIn the browser window that pops up, scroll to the bottom and click “generate token.” You may need to log into GitHub first.\nCopy the token from the green box on the next page\nBack in RStudio, run credentials::set_github_pat()\nPaste your token into the dialog box that pops up."
  }
]